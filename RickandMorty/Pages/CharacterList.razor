@page "/{PageNumber:int?}"
@using RickandMorty.Entities
@using RickandMorty.Services
@using RickandMorty.Services.Interfaces
@using RickandMorty.ViewModels
@inject IRickAndMortyService RickAndMortyService
@inject NavigationManager Navigation

<h3>Characters</h3>

@if (_characters == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Status</th>
                <th>Species</th>
                <th>Type</th>
                <th>Gender</th>
                <th>Origin</th>
                <th>Location</th>
                <th>Episodes</th>
                <th>Created At</th>
                <th>Image</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var character in _characters)
            {
                <tr>
                    <td>@character.Name</td>
                    <td>@character.Status</td>
                    <td>@character.Species</td>
                    <td>@character.Type</td>
                    <td>@character.Gender</td>
                    <td>@character.Origin</td>
                    <td>@character.Location</td>
                    <td>@character.EpisodeUrls</td>
                    <td>@character.CreatedAt.ToString("yyyy-MM-dd")</td>
                    <td><img src="@character.ImageUrl" alt="@character.Name" style="width:50px;height:50px;" /></td>
                </tr>
            }
        </tbody>
    </table>

    <div class="pagination">
        <button class="btn btn-primary" @onclick="PreviousPage" disabled="@(!_canGoToPreviousPage)">
            Previous
        </button>

        <span display:block>Page @_currentPage of @_totalPages</span>

        <button class="btn btn-primary" @onclick="NextPage" disabled="@(!_canGoToNextPage)">
            Next
        </button>
    </div>
}

@code {
    [Parameter] public int? PageNumber { get; set; }

    private RickAndMortyApiViewModel _viewModel;
    private Info _info;
    private List<Character> _characters;

    private int _currentPage = 1;
    private int _totalPages;

    private bool _canGoToPreviousPage => _currentPage > 1;
    private bool _canGoToNextPage => _currentPage < _totalPages;

    protected override async Task OnInitializedAsync()
    {
        await LoadCharactersAsync(_currentPage);
    }

    protected override async Task OnParametersSetAsync()
    {
        _currentPage = PageNumber ?? 1;
        await LoadCharactersAsync(_currentPage);
    }

    private async Task LoadCharactersAsync(int page)
    {
     
       _viewModel = await RickAndMortyService.GetCharactersAsync(page);
        if (_viewModel != null)
        {
           _characters = _viewModel.characters;

       
          foreach (Character characterEpisode in _characters)
          {
             if (characterEpisode.EpisodeUrls != string.Empty)
                        characterEpisode.EpisodeUrls = ConvertEpisodesNumber(characterEpisode.EpisodeUrls);
          }


           _info = _viewModel.Info;
           _totalPages = _info.Pages;
           _currentPage = page;
       }
       else
       {
            Navigation.NavigateTo($"/");
       }
    }

    private async Task NextPage()
    {
        if (_canGoToNextPage)
        {
            Navigation.NavigateTo($"/{_currentPage+1}");
           
        }
    }

    private async Task PreviousPage()
    {
        if (_canGoToPreviousPage)
        {
            Navigation.NavigateTo($"/{_currentPage -1}");
           
        }
    }

    private string ConvertEpisodesNumber(string arrayEpisodeURL)
    {
        string[] EpisodesURL = arrayEpisodeURL.Split(',');


        for (int i = 0; i < EpisodesURL.Length; i++)
        {
            EpisodesURL[i] = EpisodesURL[i].Substring(40);
        }
        string result = EpisodesURL != null ? string.Join(",", EpisodesURL) : string.Empty;
        return result;
    }


}


